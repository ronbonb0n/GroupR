//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.3
//     from Assets/Scripts/Player_Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Player_Controls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Player_Controls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Player_Controls"",
    ""maps"": [
        {
            ""name"": ""Player_Input"",
            ""id"": ""6f88e9d8-0d12-4b29-8a9d-47c63f5ef6ac"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""99436732-44f9-41e3-ade2-cc525eac5702"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Pointer_Position"",
                    ""type"": ""Value"",
                    ""id"": ""7b93559c-e19d-4bee-a3e8-41c82b7a4ce4"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Abilities"",
                    ""type"": ""Button"",
                    ""id"": ""7a307053-fc91-45b7-a79a-9044c4e2d6ce"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Run"",
                    ""type"": ""Button"",
                    ""id"": ""08b50bc9-250d-4971-9792-d45d1becf071"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Crouch"",
                    ""type"": ""Button"",
                    ""id"": ""b31333b1-e8ef-430b-88d6-1a1e7bd7c075"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""0c07bdf4-4a1a-47f7-8fff-123b9133385f"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pointer_Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f0f6b5fc-99ea-4a4c-9404-3d7702997335"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Abilities"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""WASD"",
                    ""id"": ""ea2c85ef-591f-4b4a-b500-5508bf1f0070"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""a578d62d-75c0-4c3b-8afc-66af87de333d"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""9aae10ce-69ed-4e21-ac30-707e9cd40d4f"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""737946a6-2ceb-4668-8d0c-786630f446dd"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""41d7e05b-0a01-4fa4-8bf5-cb9cb162b1f1"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""6bd37d31-8bfb-454c-9a5f-a2d76e355b65"",
                    ""path"": ""<Keyboard>/c"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Crouch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ac3a1920-a9c4-44ea-bc3e-d3992d93c641"",
                    ""path"": ""<Keyboard>/ctrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Crouch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bd2f0039-8dfc-44ca-9ddd-0c0caa8bb03d"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Run"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Player_Input
        m_Player_Input = asset.FindActionMap("Player_Input", throwIfNotFound: true);
        m_Player_Input_Movement = m_Player_Input.FindAction("Movement", throwIfNotFound: true);
        m_Player_Input_Pointer_Position = m_Player_Input.FindAction("Pointer_Position", throwIfNotFound: true);
        m_Player_Input_Abilities = m_Player_Input.FindAction("Abilities", throwIfNotFound: true);
        m_Player_Input_Run = m_Player_Input.FindAction("Run", throwIfNotFound: true);
        m_Player_Input_Crouch = m_Player_Input.FindAction("Crouch", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player_Input
    private readonly InputActionMap m_Player_Input;
    private IPlayer_InputActions m_Player_InputActionsCallbackInterface;
    private readonly InputAction m_Player_Input_Movement;
    private readonly InputAction m_Player_Input_Pointer_Position;
    private readonly InputAction m_Player_Input_Abilities;
    private readonly InputAction m_Player_Input_Run;
    private readonly InputAction m_Player_Input_Crouch;
    public struct Player_InputActions
    {
        private @Player_Controls m_Wrapper;
        public Player_InputActions(@Player_Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_Player_Input_Movement;
        public InputAction @Pointer_Position => m_Wrapper.m_Player_Input_Pointer_Position;
        public InputAction @Abilities => m_Wrapper.m_Player_Input_Abilities;
        public InputAction @Run => m_Wrapper.m_Player_Input_Run;
        public InputAction @Crouch => m_Wrapper.m_Player_Input_Crouch;
        public InputActionMap Get() { return m_Wrapper.m_Player_Input; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(Player_InputActions set) { return set.Get(); }
        public void SetCallbacks(IPlayer_InputActions instance)
        {
            if (m_Wrapper.m_Player_InputActionsCallbackInterface != null)
            {
                @Movement.started -= m_Wrapper.m_Player_InputActionsCallbackInterface.OnMovement;
                @Movement.performed -= m_Wrapper.m_Player_InputActionsCallbackInterface.OnMovement;
                @Movement.canceled -= m_Wrapper.m_Player_InputActionsCallbackInterface.OnMovement;
                @Pointer_Position.started -= m_Wrapper.m_Player_InputActionsCallbackInterface.OnPointer_Position;
                @Pointer_Position.performed -= m_Wrapper.m_Player_InputActionsCallbackInterface.OnPointer_Position;
                @Pointer_Position.canceled -= m_Wrapper.m_Player_InputActionsCallbackInterface.OnPointer_Position;
                @Abilities.started -= m_Wrapper.m_Player_InputActionsCallbackInterface.OnAbilities;
                @Abilities.performed -= m_Wrapper.m_Player_InputActionsCallbackInterface.OnAbilities;
                @Abilities.canceled -= m_Wrapper.m_Player_InputActionsCallbackInterface.OnAbilities;
                @Run.started -= m_Wrapper.m_Player_InputActionsCallbackInterface.OnRun;
                @Run.performed -= m_Wrapper.m_Player_InputActionsCallbackInterface.OnRun;
                @Run.canceled -= m_Wrapper.m_Player_InputActionsCallbackInterface.OnRun;
                @Crouch.started -= m_Wrapper.m_Player_InputActionsCallbackInterface.OnCrouch;
                @Crouch.performed -= m_Wrapper.m_Player_InputActionsCallbackInterface.OnCrouch;
                @Crouch.canceled -= m_Wrapper.m_Player_InputActionsCallbackInterface.OnCrouch;
            }
            m_Wrapper.m_Player_InputActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Movement.started += instance.OnMovement;
                @Movement.performed += instance.OnMovement;
                @Movement.canceled += instance.OnMovement;
                @Pointer_Position.started += instance.OnPointer_Position;
                @Pointer_Position.performed += instance.OnPointer_Position;
                @Pointer_Position.canceled += instance.OnPointer_Position;
                @Abilities.started += instance.OnAbilities;
                @Abilities.performed += instance.OnAbilities;
                @Abilities.canceled += instance.OnAbilities;
                @Run.started += instance.OnRun;
                @Run.performed += instance.OnRun;
                @Run.canceled += instance.OnRun;
                @Crouch.started += instance.OnCrouch;
                @Crouch.performed += instance.OnCrouch;
                @Crouch.canceled += instance.OnCrouch;
            }
        }
    }
    public Player_InputActions @Player_Input => new Player_InputActions(this);
    public interface IPlayer_InputActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnPointer_Position(InputAction.CallbackContext context);
        void OnAbilities(InputAction.CallbackContext context);
        void OnRun(InputAction.CallbackContext context);
        void OnCrouch(InputAction.CallbackContext context);
    }
}
